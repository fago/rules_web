<?php
// $Id$

/**
 * @file Rules Remote Sites - Module file.
 */

/**
 * Implements of hook_entity_info().
 */
function rules_web_remote_entity_info() {
  return array(
    'rules_web_remote' => array(
      'label' => t('Remote site'),
      'entity class' => 'RulesWebRemote',
      'controller class' => 'EntityAPIController',
      'base table' => 'rules_web_remote',
      'fieldable' => TRUE,
      'object keys' => array(
        'id' => 'id',
        'name' => 'name',
      ),
      'exportable' => TRUE,
    ),
  );
}

/**
 * Implements of hook_entity_info_alter().
 */
function rules_web_remote_entity_info_alter(&$info) {
  $remotes = entity_load('rules_web_remote', FALSE);
  // We register entities for all remote data types, however we skip the remote
  // site pointing at ourself ('self') defined by the testing module, as this
  // would result in issueing a page request during the entity info cache
  // refresh on our site, which would result in a nice cache building endless
  // loop.
  unset($remotes['self']);
  
  foreach ($remotes as $name => $remote) {
    foreach ($remote->dataTypes() as $type => $type_info) {
      // Don't add in entity types, that stem from another site.
      if (strpos($type, 'rules_web_') !== 0) {
        $info['rules_web_' . $name . '_' . $type] = $type_info + array(
          'controller class' => 'RulesWebRemoteEntityController',
          'rules web remote' => array(
            'remote' => $name,
            'type' => $type,
          ),
          'fieldable' => FALSE,
          'revision table' => FALSE,
        );
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function rules_web_remote_permission() {
  $permissions['administer remote sites'] = array(
    'title' => t('Administer remote sites'),
    'description' => t('Administer remote sites used with rules.'),
  );
  foreach (entity_load('rules_web_remote', FALSE) as $name => $remote) {
    $permissions['interact with remote ' . $name] = array(
      'title' => t('Interact with remote site %label', array('%label' => $remote->label)),
    );
  }
  return $permissions;
}

/**
 * Gets all defined remote endpoint types.
 */
function rules_web_remote_get_types() {
  return module_invoke_all('rules_endpoint_types');
}

/**
 * Implements hook_rules_endpoint_types().
 */
function rules_web_remote_rules_endpoint_types() {
  return array(
    'rules_web_hook' => array(
      'label' => t('Rules Web Hooks'),
      'class' => 'RulesWebRemoteEndpointWebHooks',
    ),
  );
}


/**
 * Load a single rules web remote.
 */
function rules_web_remote_load($id) {
  $return = entity_load('rules_web_remote', array($id));
  return reset($return);
}
