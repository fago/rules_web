<?php
// $Id$

/**
 * @file Rules Web Hooks - Module file.
 */

/**
 * Implements of hook_entity_info().
 */
function rules_web_hook_entity_info() {
  return array(
    'rules_web_hook' => array(
      'label' => t('Web hook'),
      'controller class' => 'EntityAPIController',
      'base table' => 'rules_web_hook',
      'fieldable' => TRUE,
      'object keys' => array(
        'id' => 'id',
        'name' => 'name',
      ),
      'exportable' => TRUE,
      'access callback' => 'rules_web_hook_access_callback',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function rules_web_hook_permission() {
  return array(
    'administer web hooks' =>  array(
      'title' => t('Administer web hooks'),
      'description' => t('Define web hooks and administer remote sites.'),
    ),
    'use web hooks' =>  array(
      'title' => t('Make use of web hooks'),
    ),
  );
}

/**
 * An access callback for the rules web entities.
 *
 * @see rules_web_entity_info()
 */
function rules_web_hook_access_callback($op, $entity_type, $entity = NULL, $account = NULL) {
  if ($op == 'view') {
    return user_access('use web hooks', $account);
  }
  return user_access('administer web hooks', $account);
}

/**
 * Gets a REST client for sending notifications about occured web hooks.
 */
function rules_web_hook_get_client($auth = NULL) {
  $client = &drupal_static(__FUNCTION__);

  if (!isset($client)) {
    $client = new RestClient(NULL, new RestClientBaseFormatter(RestClientBaseFormatter::FORMAT_JSON));
  }
  // Add http auth credentials if necessary.
  $client->curlOpts[CURLOPT_USERPWD] = !empty($auth['username']) ? $auth['username'] . ':' . $auth['password'] : '';
  $client->curlOpts[CURLOPT_HTTPAUTH] = !empty($auth['method']) ? (int)$auth['method'] : '';
  return $client;
}

/**
 * Invoke a web hook.
 *
 * @param $name
 *   The name of the web hook to invoke.
 * @param $args
 *   An array of arguments to pass to the hook, keyed with the variable names
 *   as described in $hook->variables. Optionally the arguments may be rules
 *   data wrappers.
 * @param $state
 *   The rules evaluateion state, if invoked during a rules evaluation.
 */
function rules_web_hook_invoke($hook_name, $args = array(), $state = NULL) {
  $hook = reset(entity_load('rules_web_hook', array($hook_name)));

  // Get the actual property values by applying all getter callbacks.
  foreach ($hook->variables as $name => $var_info) {
    $var = rules_wrap_data($args[$name], $var_info);
    if ($var instanceof RulesDataMetadataWrapperInterface) {
      $args[$name] = EntityResourceServicesCRUD::getData($var->metadataWrapper($state));
    }
  }
  // Send notifications to all subscribed HTTP callbacks.
  $time = time();
  $query = db_select('rules_web_hook_subscriber', 'rs')
    ->fields('rs')
    ->condition('hook', $hook_name);

  foreach ($query->execute() as $row) {
    try {
      $client = rules_web_hook_get_client(unserialize($row->http_auth));
      $client->post($row->url, array(
        'event_name' => $hook_name,
        'event_data' => $args,
        'token' => rules_web_hook_hash_token($row->token, $time),
        'time' => $time,
      ));
    }
    catch (erException $e) {
      $args = array('%name' => $hook_name, '%url' => $url, '%message' => $e->getMessage());
      watchdog('rules web hooks', 'Error sending hook %name notification to %url. Error message: %message.', $args, WATCHDOG_WARNING);
    }
  }
}

/**
 * Hashes the token and the provided timestamp.
 */
function rules_web_hook_hash_token($token, $timestamp) {
  // A single md5() is vulnerable to length-extension attacks, so use it twice.
  return md5($timestamp . md5($token));
}


/**
 * Implements hook_default_services_endpoint().
 */
function rules_web_hook_default_services_endpoint() {
  $endpoint = new stdClass;
  $endpoint->disabled = FALSE;
  $endpoint->endpoint = 'rules_web_hook';
  $endpoint->title = 'Rules Web Hooks Endpoint';
  $endpoint->server = 'rest_server';
  $endpoint->path = 'rules_web';
  $endpoint->authentication = '';
  $endpoint->authentication_settings = FALSE;
  $endpoint->resources = array(
    'node' => array(
      'alias' => '',
      'operations' => array(
        'create' => array(
          'enabled' => 0,
        ),
        'retrieve' => array(
          'enabled' => 1,
        ),
        'update' => array(
          'enabled' => 0,
        ),
        'delete' => array(
          'enabled' => 0,
        ),
        'index' => array(
          'enabled' => 0,
        ),
      ),
    ),
    'comment' => array(
      'alias' => '',
      'operations' => array(
        'create' => array(
          'enabled' => 0,
        ),
        'retrieve' => array(
          'enabled' => 1,
        ),
        'update' => array(
          'enabled' => 0,
        ),
        'delete' => array(
          'enabled' => 0,
        ),
        'index' => array(
          'enabled' => 0,
        ),
      ),
    ),
    'user' => array(
      'alias' => '',
      'operations' => array(
        'create' => array(
          'enabled' => 0,
        ),
        'retrieve' => array(
          'enabled' => 1,
        ),
        'update' => array(
          'enabled' => 0,
        ),
        'delete' => array(
          'enabled' => 0,
        ),
        'index' => array(
          'enabled' => 0,
        ),
      ),
    ),
    'taxonomy_term' => array(
      'alias' => '',
      'operations' => array(
        'create' => array(
          'enabled' => 0,
        ),
        'retrieve' => array(
          'enabled' => 1,
        ),
        'update' => array(
          'enabled' => 0,
        ),
        'delete' => array(
          'enabled' => 0,
        ),
        'index' => array(
          'enabled' => 0,
        ),
      ),
    ),
    'taxonomy_vocabulary' => array(
      'alias' => '',
      'operations' => array(
        'create' => array(
          'enabled' => 0,
        ),
        'retrieve' => array(
          'enabled' => 1,
        ),
        'update' => array(
          'enabled' => 0,
        ),
        'delete' => array(
          'enabled' => 0,
        ),
        'index' => array(
          'enabled' => 0,
        ),
      ),
    ),
    'rules_web_hook' => array(
      'alias' => '',
      'operations' => array(
        'create' => array(
          'enabled' => 0,
        ),
        'retrieve' => array(
          'enabled' => 0,
        ),
        'update' => array(
          'enabled' => 0,
        ),
        'delete' => array(
          'enabled' => 0,
        ),
        'index' => array(
          'enabled' => 1,
        ),
      ),
    ),
    'entity_metadata' => array(
      'alias' => '',
      'operations' => array(
        'create' => array(
          'enabled' => 0,
        ),
        'retrieve' => array(
          'enabled' => 0,
        ),
        'update' => array(
          'enabled' => 0,
        ),
        'delete' => array(
          'enabled' => 0,
        ),
        'index' => array(
          'enabled' => 1,
        ),
      ),
    ),
  );
  return array('test' => $endpoint);
}
