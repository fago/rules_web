<?php
// $Id$

/**
 * @file Rules Web Remote Tests
 */

class RulesWebHooksTestCase extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'Rules Web',
      'description' => 'Tests providing and using rules web hooks.',
      'group' => 'Rules',
    );
  }

  function setUp() {
    parent::setUp('rules_web_test');
  }

  /**
   * Calculates the output of t() given an array of placeholders to replace.
   */
  static function t($text, $strings) {
    $placeholders = array();
    foreach ($strings as $string) {
      $placeholders['%' . $string] = drupal_placeholder(array('text' => $string));
    }
    return strtr($text, $placeholders);
  }
  
  /**
   * Returns a remote site object for this site.
   */
  protected function getSelfRemoteSiteObject() {
    $remote = rules_web_remote_load('self');
    $remote->settings = array(
      'curl options' => array(
        // For testing skip ssl verification.
        CURLOPT_SSL_VERIFYPEER => FALSE,
        CURLOPT_SSL_VERIFYHOST => FALSE,
        // For testing just keep the current session.
        CURLOPT_COOKIE => $this->session_name . '=' . $this->session_id,
      ),
    );
    // Add in the simpletest http auth credentials, if any.
    if (isset($this->httpauth_credentials)) {
      $remote->settings['curl options'] += array(
        CURLOPT_HTTPAUTH => $this->httpauth_method,
        CURLOPT_USERPWD => $this->httpauth_credentials,
      );
    }
    // Add the simpletest useragent so we connect to the testing instance.
    if (preg_match('/simpletest\d+/', $GLOBALS['db_prefix'], $matches)) {
      $remote->settings['curl options'][CURLOPT_USERAGENT] = drupal_generate_test_ua($matches[0]);
    }
    return $remote;
  }
  
  function createAdmin() {
    $perms = array_keys(module_invoke_all('permission'));
    return $this->drupalCreateUser($perms);
  }
 
  /**
   * Basic tests.
   */
  function testBasicService() {
    $user = $this->createAdmin();
    $user->name = '<b>xss</b>';
    user_save($user, array('name' => $user->name));
    $this->drupalLogin($user);
    
    $remote = $this->getSelfRemoteSiteObject();
    module_load_include('inc', 'rules_web_hook', 'rules_web_hook.services');
    $this->assertTrue($remote->dataTypes() == rules_web_hook_list_entity_metadata(), 'Data types returned.');
    $return = drupal_json_decode(drupal_json_encode(rules_web_hook_list_hooks()));
    $this->assertTrue($remote->events() == $return, 'Events returned.');
    
    // Test loading data.
    $remote_user = $remote->load('user', $user->uid);
    $this->assertEqual($remote_user->name, $user->name, 'Remote user loaded.');

    // Test loading data through entity_load().
    rules_web_test_inject_entity_types($remote);
    $return = entity_load('rules_web_self_user', array($user->uid));
    $remote_user = reset($return);
    $this->assertEqual($remote_user->name, $user->name, 'Remote user loaded with entity_load()');
    
    // Now try using a data wrapper to access the properties as stated.
    $wrapper = entity_metadata_wrapper('rules_web_self_user', $remote_user);
    $this->assertEqual($wrapper->name->value(), $user->name, 'Using wrapper with remote entity.');
    $this->assertEqual($wrapper->name->value(array('sanitize' => TRUE)), filter_xss($user->name), 'Sanitizing with remote data.');
    
    // Make sure accessing a not existing property doesn't cause troubles.
    unset($remote_user->name);
    $wrapper = entity_metadata_wrapper('rules_web_self_user', $remote_user);
    $this->assertFalse($wrapper->name->value(), 'Accessing not existing property');
  }
}
